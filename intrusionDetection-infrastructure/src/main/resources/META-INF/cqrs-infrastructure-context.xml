<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:axon="http://www.axonframework.org/schema/core"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:axon-amqp="http://www.axonframework.org/schema/amqp"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.axonframework.org/schema/core http://www.axonframework.org/schema/axon-core.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
						http://www.axonframework.org/schema/amqp http://www.axonframework.org/schema/axon-amqp.xsd 
						http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
						http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd ">

	<context:annotation-config />
	
	<axon:annotation-config />
	
	<context:component-scan base-package="com.github.frajimiba.intrusionDetection" />
	
	<rabbit:fanout-exchange id="eventBusExchange" name="Axon.EventBus" durable="false" auto-delete="true">
        <rabbit:bindings>
            <rabbit:binding queue="eventBusQueue"/>
        </rabbit:bindings>
    </rabbit:fanout-exchange>
    
    <rabbit:queue id="eventBusQueue" name="Axon.EventBus.Default" auto-delete="true" durable="false"/>

    <rabbit:admin id="rabbitAdmin" auto-startup="true" connection-factory="connectionFactory"/>
	
	<rabbit:connection-factory id="connectionFactory"  username="test" password="test"/>
	
	<axon-amqp:terminal id="terminal" exchange-name="Axon.EventBus" transactional="true">
        <axon-amqp:default-configuration prefetch="100" transaction-size="20" transaction-manager="transactionManager"/>
    </axon-amqp:terminal>
	
	<axon:event-bus id="eventBus" terminal="terminal" />
	
	<axon:cluster id="cluster" default="true">
        <axon:meta-data>
            <entry key="AMQP.Config">
                <bean class="org.axonframework.eventhandling.amqp.spring.SpringAMQPConsumerConfiguration">
                    <property name="queueName" value="Axon.EventBus.Default"/>
                </bean>
            </entry>
        </axon:meta-data>
    </axon:cluster>

	<axon:command-bus id="commandBus" transaction-manager="transactionManager" />

	<bean id="schedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.scheduler.instanceName">AxonSagaScheduler</prop>
				<prop key="org.quartz.scheduler.instanceId">AUTO</prop>
				<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
				<prop key="org.quartz.threadPool.threadCount">30</prop>
				<prop key="org.quartz.threadPool.threadPriority">5</prop>
				<prop key="org.quartz.jobStore.misfireThreshold">100</prop>
				<prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
				<prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.WebLogicDelegate</prop>
				<prop key="org.quartz.jobStore.useProperties">false</prop>
				<prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
				<prop key="org.quartz.jobStore.isClustered">true</prop>
				<prop key="org.quartz.jobStore.clusterCheckinInterval">1000</prop>
				<prop key="org.quartz.jobStore.selectWithLockSQL">SELECT * FROM {0}LOCKS UPDLOCK WHERE LOCK_NAME = ?</prop>
			</props>
		</property>
	</bean>

	<bean id="axonEventScheduler" class="org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler">
		<property name="eventBus" ref="eventBus" />
		<property name="scheduler" ref="schedulerFactoryBean" />
	</bean>

	<bean id="resourceInjector" class="org.axonframework.saga.spring.SpringResourceInjector" />
	
	<bean id="sagaSerializer" class="org.axonframework.serializer.xml.XStreamSerializer"/>
	
	<axon:jpa-saga-repository id="sagaRepository" resource-injector="resourceInjector"
				use-explicit-flush="true" saga-serializer="sagaSerializer"
				entity-manager-provider="entityManagerProvider"/>

	<bean id="entityManagerProvider" class="com.github.frajimiba.intrusionDetection.infrastructure.InfrastructureEntityManagerProvider" />

	<axon:jpa-event-store id="eventStore" entity-manager-provider="entityManagerProvider" data-source="dataSource" />

	<task:scheduler id="taskScheduler" pool-size="5"/>
	
	<bean id="retryScheduler" class="org.axonframework.commandhandling.gateway.IntervalRetryScheduler">
		<constructor-arg value="#{taskScheduler.scheduledExecutor}" />
        <constructor-arg value="500"/>
        <constructor-arg value="10"/>
	</bean>

	<bean class="org.axonframework.commandhandling.gateway.CommandGatewayFactoryBean">
		<property name="commandBus" ref="commandBus" />
		
	</bean>

</beans>